name: Azure Pipelines
variables:
  python.version: "3.9.1"
stages:
  - stage: Provisioning
    jobs:
    - job: provision_azure_infrastructure
      displayName: Provision Azure Infrastructure
      pool:
        vmImage: 'ubuntu-18.04'
      steps:
      - task: DownloadSecureFile@1
        name: tfvardef
        displayName: Download terraform.tfvars
        inputs:
          secureFile: 'terraform.tfvars'
      
      - task: InstallSSHKey@0
        inputs:
          knownHostsEntry: 'default'
          sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCn6wutENkms2AHL2UUQcJlh2+qFBZRhYpSZ+tSRERAyedG3n4AtDDrgiNXdAYsuAa2AGWrvrcoYHDdyYXvxsXmVQu1cKgaKMnSqglD2TcZyPLLFr5aJ0BEegGUU9ddSMFUi/UsQ5nbtVm9To6Ke7b496PDBAp4fnorn8QJXEj9GguToKuiZFEpH1mxlunOcTDgkqB/RR+h63XwxO3hwaRs92L0BsqjzAeFA5tUAvG/nXQJ3gx9/FJ6Ny/cVmvyTj45ol7uFpx4EoR1nKyIa1aJrnsvqoSeYJXQQj/6eeaE0rpPE/0GrnZKPfGD0MF/aH8uzr/Rh5ZkZSJTYFL626ZXFHy3+1MDJ2T/YCn12vlP48RaAPgil3m5h8Pajw/RatedIuTH49OKlAdvNnSSoreI7cw+xWhyuSQWYKOKe/btmCJ2IEhSBV35d4r9vRDLgROo1FBUiUH+mIDkWi83bkOMEDo+OgkTU/d+YU8avdty3AE0xuHsry00FKneySRViak= minhtc900@Minhs-MacBook-Air.local'
          sshKeySecureFile: 'udacity_azure'

      - bash: |
          cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environments/test
        displayName: Copy terraform.tfvars

      - bash: |
          echo Pipeline workspace dir is $(Pipeline.Workspace)
          echo Terraform variable definition file is $(tfvardef.secureFilePath)
          cd $(Agent.TempDirectory)
          pwd
          ls -la
          cat udacity_azure.pub
          cd ~/.ssh/
          pwd
          ls -la
          cat known_hosts
          # $(System.DefaultWorkingDirectory) is equivalent to $(Build.SourcesDirectory)
          cd $(System.DefaultWorkingDirectory)  
          pwd
          ls -la
        displayName: Verify build environment (pre)                


<<<<<<< HEAD
      - task: TerraformInstaller@0
=======
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
>>>>>>> 36209654bc9e2d552740693936ad5e6e3b4b6c5b
        displayName: Install Terraform
        inputs:
          terraformVersion: '0.13.5'
      - task: TerraformCLI@0
        displayName: "Terraform init"
        inputs:
          provider: "azurerm"
          commandOptions: "-backend=true"
          command: init
          workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
          backendType: azurerm
          backendServiceArm: "azurerm-sc"
          backendAzureRmResourceGroupName: "tstate"
          backendAzureRmStorageAccountName: "tstate20578"
          backendAzureRmContainerName: "tstate"
          backendAzureRmKey: "terraform.tfstate"
        timeoutInMinutes: 2
      - task: TerraformCLI@0
        displayName: "Terraform plan"
        inputs:
          provider: "azurerm"
          command: "plan"
          workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
          environmentServiceName: "azurerm-sc"
      - task: TerraformCLI@0
        displayName: "Terraform apply"
        inputs:
          provider: "azurerm"
          command: "apply"
          workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
          environmentServiceName: "azurerm-sc"
  - stage: Build
    displayName: Build
    jobs:
      - job: Build
        pool:
          name: Hosted Ubuntu 1604
        steps:
          #Needed for Terraform VM deployment
          # - task: InstallSSHKey@0
          #   inputs:
          #     knownHostsEntry: 'KNOWN_HOSTS_STRING'
          #     sshPublicKey: 'PUBLIC_KEY'
          #     sshKeySecureFile: 'id_rsa'
          # sudo mkdir /var/logs
          # sudo chmod 775 /var/logs
          # python3 test-UI.py > test-UI.log
          # cat test-UI.log
          # ls
          # sudo mv test-UI.log /var/logs
          # ls /var/logs
          # sudo chmod 775 /var/logs/test-UI.log
          - task: ArchiveFiles@2
            displayName: "Archive FakeRestAPI"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/fakerestapi"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip"
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
            displayName: "Upload Package"
            artifact: drop-fakerestapi
          - task: ArchiveFiles@2
            displayName: "Archive files"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/selenium"
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/selenium-tests.zip
              replaceExistingArchive: true
          - upload: $(Build.ArtifactStagingDirectory)/selenium-tests.zip
            artifact: selenium
  - stage: WebAppDeployment
    displayName: Web App Deployment
    jobs:
      - deployment: FakeRestAPI
        pool:
          vmImage: "Ubuntu-16.04"
        environment: "eqr-env"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: "Deploy Azure Web App"
                  inputs:
                    azureSubscription: "azurerm-sc"
                    appType: "webAppLinux"
                    appName: "qa-releases-AppService"
                    package: "$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip"
                    deploymentMethod: "auto"
      - deployment: VMDeploy
        displayName: VM Deploy
        environment:
          name: "VM-TEST"
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - task: Bash@3
                  displayName: "Install Dependencies"
                  inputs:
                    targetType: "inline"
                    script: |
                      #! /bin/bash
                      sudo apt-get update
                      sudo apt-get upgrade -y
                      sudo apt-get install python3-pip -y
                      sudo apt-get install unzip -y
                      sudo apt-get install -y chromium-browser
                      pip3 install selenium

                      # download chrome driver
                      FILE=chromedriver_linux64.zip
                      if [ -f "$FILE" ]; then
                        echo "$FILE exists."
                      else
                        wget https://chromedriver.storage.googleapis.com/2.41/chromedriver_linux64.zip
                      fi
                      # install chrome driver
                      unzip chromedriver_linux64.zip
                      sudo mv chromedriver /usr/bin/chromedriver
                      sudo chown root:root /usr/bin/chromedriver
                      sudo chmod +x /usr/bin/chromedriver
                      chromium-browser -version
                      chromedriver --version
                      # agent log analytics
                      wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w b593171c-b1a7-49b1-8024-2ad501152616 -s B7ZLRkIJBs6Al5VGkDj9LeaRgjjIWJLkH7XCz1HQNAnTB2ppl9Zk9lK1UswUMn1FAL3ly0uc57qBtymkQ/Gy1A== -d opinsights.azure.com
                      #If you face some error with agent try the following
                      #install manually the agent : https://docs.microsoft.com/fr-fr/azure/azure-monitor/platform/agent-linux#install-the-agent-manually
                      #restart the agent : sudo sh omsagent*.sh --purge
                - download: current
                  displayName: "Download Selenium"
                  artifact: selenium

  - stage: UITests
    displayName: UI Tests
    jobs:
      - deployment: VMRunUITests
        displayName: Run UI Tests
        environment:
          name: "VM-TEST"
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  displayName: "Download Selenium"
                  artifact: selenium
                - task: Bash@3
                  displayName: UI Tests
                  inputs:
                    targetType: "inline"
                    script: |
                      unzip -o $(Pipeline.Workspace)/selenium/selenium-tests.zip -d .
                      sudo mkdir -p /var/log/selenium
                      sudo chmod 755 /var/log/selenium
                      python3 test-UI.py > test-UI.log
                      cat test-UI.log
                      sudo mv test-UI.log /var/log/selenium/
                      sudo chmod 775 /var/log/selenium/test-UI.log
  - stage: IntegrationTests
    displayName: Integration Tests
    jobs:
      - job: PostmanTests
        displayName: PostmanTests
        steps:
          - task: NodeTool@0
            displayName: Install Node v12.X
            inputs:
              versionSpec: "12.x"
          - task: CmdLine@2
            displayName: Install Newman
            inputs:
              script: "npm install newman"
              workingDirectory: "$(System.DefaultWorkingDirectory)"
          - task: CmdLine@2
            displayName: Run Regression Tests
            inputs:
              script: "newman run automatedtesting/postman/RegressionTestSuite.json -e automatedtesting/postman/TestEnv.Environment.json --delay-request 5000 --bail newman -x --reporters cli,junit --reporter-junit-export $(System.DefaultWorkingDirectory)/Results/RegressionTests.xml"
              workingDirectory: "$(System.DefaultWorkingDirectory)"
            continueOnError: true
          - task: CmdLine@2
            displayName: Run Data Validation Tests
            inputs:
              script: "newman run automatedtesting/postman/DataValidationTestSuite.json -e automatedtesting/postman/TestEnv.Environment.json --delay-request 5000 --bail newman -x --reporters cli,junit --reporter-junit-export $(System.DefaultWorkingDirectory)/Results/DataValidationTests.xml"
              workingDirectory: "$(System.DefaultWorkingDirectory)"
            continueOnError: true
          - task: CmdLine@2
            inputs:
              script: "ls"
              workingDirectory: "$(System.DefaultWorkingDirectory)"
          - task: PublishTestResults@2
            displayName: Publish Test Reports
            condition: always()
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "$(System.DefaultWorkingDirectory)/Results/*.xml"
  - stage: JMeterTests
    displayName: JMeter Tests
    jobs:
      - job: JMeterTests
        displayName: JMeterTests
        steps:
          - task: JMeterInstaller@0
            inputs:
              jmeterVersion: "5.2.1"
          - task: Bash@3
            displayName: EnduranceTest
            inputs:
              targetType: "inline"
              script: "jmeter -n -t automatedtesting/jmeter/EnduranceTestSuite.jmx -Jresdir=automatedtesting/jmeter/endurancepages.csv -l automatedtesting/jmeter/report/enduranceresults.jtl -e -o automatedtesting/jmeter/endurancereport"
          - task: Bash@3
            displayName: StressTest
            inputs:
              targetType: "inline"
              script: "jmeter -n -t automatedtesting/jmeter/StressTestSuite.jmx -Jresdir=automatedtesting/jmeter/stresspages.csv -l automatedtesting/jmeter/report/stressresults.jtl -e -o automatedtesting/jmeter/stressreport"
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "automatedtesting/jmeter"
              ArtifactName: "jmeter"
              publishLocation: "Container"